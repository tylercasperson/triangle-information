[{"/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/index.js":"1","/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/App.js":"2","/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/reportWebVitals.js":"3","/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/Calculations.js":"4","/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/Instructions.js":"5","/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/InputBox.js":"6","/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/AngleCalculations.js":"7","/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/InputGroup.js":"8","/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/CalculateButton.js":"9","/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/MessageGroup.js":"10","/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/Drawing.js":"11"},{"size":500,"mtime":1610602991766,"results":"12","hashOfConfig":"13"},{"size":393,"mtime":1613111677070,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1610602991767,"results":"15","hashOfConfig":"13"},{"size":17411,"mtime":1614753291348,"results":"16","hashOfConfig":"13"},{"size":552,"mtime":1613026938142,"results":"17","hashOfConfig":"13"},{"size":482,"mtime":1613972449248,"results":"18","hashOfConfig":"13"},{"size":3436,"mtime":1613112265979,"results":"19","hashOfConfig":"13"},{"size":2004,"mtime":1613973453533,"results":"20","hashOfConfig":"13"},{"size":258,"mtime":1613205174465,"results":"21","hashOfConfig":"13"},{"size":532,"mtime":1613366168033,"results":"22","hashOfConfig":"13"},{"size":5542,"mtime":1614839104873,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1jnsib1",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/index.js",[],["48","49"],"/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/App.js",[],"/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/reportWebVitals.js",[],"/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/Calculations.js",["50","51","52","53","54"],"import React, { useState, useEffect } from 'react';\nimport InputGroup from './InputGroup';\nimport MessageGroup from './MessageGroup';\nimport CalculateButton from './CalculateButton';\nimport Drawing from './Drawing';\n\nconst Calculations = () => {\n  const [sideA, setSideA] = useState('');\n  const [sideB, setSideB] = useState('');\n  const [sideC, setSideC] = useState('');\n  const [angleA, setAngleA] = useState('');\n  const [angleB, setAngleB] = useState('');\n  const [angleC, setAngleC] = useState('');\n\n  const [angleAtype, setAngleAtype] = useState('');\n  const [angleBtype, setAngleBtype] = useState('');\n  const [angleCtype, setAngleCtype] = useState('');\n\n  const [calculate, setCalculate] = useState(0);\n\n  const [triangle, setTriangle] = useState('');\n  const [message, setMessage] = useState('');\n\n  const [originalInput, setOriginalInput] = useState(['', '', '', '', '', '']);\n  const [triangle1, setTriangle1] = useState(['', '', '', '', '', '']);\n  const [triangle2, setTriangle2] = useState([]);\n  const [triangle3, setTriangle3] = useState([]);\n\n  const logValues = () => {\n    console.log(\n      'a: ',\n      sideA,\n      'b: ',\n      sideB,\n      'c: ',\n      sideC,\n      'A: ',\n      angleA,\n      'B: ',\n      angleB,\n      'C: ',\n      angleC\n    );\n  };\n\n  useEffect(() => {\n    missingData();\n    // logValues();\n\n    whichTriangle();\n\n    console.log('oI: ', originalInput);\n  }, [calculate, angleA, angleB, angleC]);\n\n  const whichTriangle = () => {\n    if (sideA === sideB && sideA === sideC && sideB === sideC) {\n      setTriangle('Equilateral');\n    } else if (sideA !== sideB && sideA !== sideC && sideB !== sideC) {\n      setTriangle('scalene');\n    } else {\n      setTriangle('Isosceles');\n    }\n\n    if (triangle1.length === 6) {\n      if (\n        +sideA + +sideB >= +sideC &&\n        +sideA + +sideC >= +sideB &&\n        +sideB + +sideC >= +sideA\n      ) {\n        if (angleA + angleB + angleC === 180) {\n          setMessage(\n            `These side lengths produce a valid ${triangle} triangle.`\n          );\n        } else {\n          setMessage(\n            'The angles do not add up to 180 degrees so the data provided does not make this a valid triangle.'\n          );\n        }\n      } else {\n        setMessage(\n          'The sides do not connect. One is too long or too short to be a valid triangle.'\n        );\n      }\n    } else {\n      setMessage('More data is needed.');\n    }\n    triangleData();\n\n    anotherTriangle();\n  };\n\n  const triangleData = () => {\n    // let sideOne =\n    //   originalInput !== ''\n    //   // ? (document.getElementById('sideA').value = { sideA })\n    //     : null;\n    // let emptyArr = originalInput.filter((empty) => empty === '').length;\n    // console.log(emptyArr);\n    // if (emptyArr === 3 && triangle1.length === 0) {\n    // setSideA(originalInput[0]);\n    // setSideB(originalInput[1]);\n    // setSideC(originalInput[2]);\n    // setAngleA(originalInput[3]);\n    // setAngleB(originalInput[4]);\n    // setAngleC(originalInput[5]);\n    setTriangle1([sideA, sideB, sideC, angleA, angleB, angleC]);\n    trianglePlots(triangle1);\n\n    // }\n  };\n\n  const angleAnalysis = (angle, abc) => {\n    console.log('angleAnalysis');\n    console.log('angle: ', angle);\n    const whichAngle = (angleType) => {\n      console.log('whichAngle');\n      if (abc === 'A') {\n        setAngleAtype(angleType);\n      } else if (abc === 'B') {\n        setAngleBtype(angleType);\n      } else if (abc === 'C') {\n        setAngleCtype(angleType);\n      }\n    };\n    if (angle === 90) {\n      whichAngle('Right angle');\n    } else if (angle < 90) {\n      whichAngle('Acute angle');\n    } else if (angle > 90) {\n      whichAngle('Obtuse angle');\n    }\n  };\n\n  const missingData = () => {\n    const data =\n      // all three\n      sideA !== '' &&\n      sideB !== '' &&\n      sideC !== '' &&\n      angleA === '' &&\n      angleB === '' &&\n      angleC === ''\n        ? 'abc'\n        : sideA === '' &&\n          sideB === '' &&\n          sideC === '' &&\n          angleA !== '' &&\n          angleB !== '' &&\n          angleC !== ''\n        ? 'ABC'\n        : // two sides\n        sideA !== '' &&\n          sideB !== '' &&\n          sideC === '' &&\n          angleA !== '' &&\n          angleB === '' &&\n          angleC === ''\n        ? 'abA'\n        : sideA === '' &&\n          sideB !== '' &&\n          sideC !== '' &&\n          angleA !== '' &&\n          angleB === '' &&\n          angleC === ''\n        ? 'bAc'\n        : sideA !== '' &&\n          sideB === '' &&\n          sideC !== '' &&\n          angleA !== '' &&\n          angleB === '' &&\n          angleC === ''\n        ? 'acA'\n        : sideA !== '' &&\n          sideB !== '' &&\n          sideC === '' &&\n          angleA === '' &&\n          angleB !== '' &&\n          angleC === ''\n        ? 'baB'\n        : sideA === '' &&\n          sideB !== '' &&\n          sideC !== '' &&\n          angleA === '' &&\n          angleB !== '' &&\n          angleC === ''\n        ? 'bcB'\n        : sideA !== '' &&\n          sideB === '' &&\n          sideC !== '' &&\n          angleA === '' &&\n          angleB !== '' &&\n          angleC === ''\n        ? 'cBa'\n        : sideA !== '' &&\n          sideB !== '' &&\n          sideC === '' &&\n          angleA === '' &&\n          angleB === '' &&\n          angleC !== ''\n        ? 'aCb'\n        : sideA === '' &&\n          sideB !== '' &&\n          sideC !== '' &&\n          angleA === '' &&\n          angleB === '' &&\n          angleC !== ''\n        ? 'cbC'\n        : sideA !== '' &&\n          sideB === '' &&\n          sideC !== '' &&\n          angleA === '' &&\n          angleB === '' &&\n          angleC !== ''\n        ? 'caC'\n        : // one side\n        sideA !== '' &&\n          sideB === '' &&\n          sideC === '' &&\n          angleA !== '' &&\n          angleB !== '' &&\n          angleC === ''\n        ? 'ABa'\n        : sideA !== '' &&\n          sideB === '' &&\n          sideC === '' &&\n          angleA === '' &&\n          angleB !== '' &&\n          angleC !== ''\n        ? 'BaC'\n        : sideA !== '' &&\n          sideB === '' &&\n          sideC === '' &&\n          angleA !== '' &&\n          angleB === '' &&\n          angleC !== ''\n        ? 'ACa'\n        : sideA === '' &&\n          sideB !== '' &&\n          sideC === '' &&\n          angleA !== '' &&\n          angleB !== '' &&\n          angleC === ''\n        ? 'BAb'\n        : sideA === '' &&\n          sideB !== '' &&\n          sideC === '' &&\n          angleA === '' &&\n          angleB !== '' &&\n          angleC !== ''\n        ? 'BCb'\n        : sideA === '' &&\n          sideB !== '' &&\n          sideC === '' &&\n          angleA !== '' &&\n          angleB === '' &&\n          angleC !== ''\n        ? 'CbA'\n        : sideA === '' &&\n          sideB === '' &&\n          sideC !== '' &&\n          angleA !== '' &&\n          angleB !== '' &&\n          angleC === ''\n        ? 'AcB'\n        : sideA === '' &&\n          sideB === '' &&\n          sideC !== '' &&\n          angleA === '' &&\n          angleB !== '' &&\n          angleC !== ''\n        ? 'CBc'\n        : sideA === '' &&\n          sideB === '' &&\n          sideC !== '' &&\n          angleA !== '' &&\n          angleB === '' &&\n          angleC !== ''\n        ? 'CAc'\n        : null;\n\n    switch (data) {\n      // all three\n      case 'abc':\n        SSS();\n        break;\n      case 'ABC':\n        AAA();\n        break;\n      // two sides\n      case 'abA':\n        SSA(sideA, sideB, angleA, data);\n        break;\n      case 'bAc':\n        SAS(sideB, angleA, sideC, data);\n        break;\n      case 'acA':\n        SSA(sideA, sideC, angleA, data);\n        break;\n      case 'baB':\n        SSA(sideB, sideA, angleB, data);\n        break;\n      case 'bcB':\n        SSA(sideB, sideC, angleB, data);\n        break;\n      case 'cBa':\n        SAS(sideC, angleB, sideA, data);\n        break;\n      case 'aCb':\n        SAS(sideA, angleC, sideB, data);\n        break;\n      case 'cbC':\n        SSA(sideC, sideB, angleC, data);\n        break;\n      case 'caC':\n        SSA(sideC, sideA, angleC, data);\n        break;\n      // one side\n      case 'ABa':\n        AAS(angleA, angleB, sideA, data);\n        break;\n      case 'BaC':\n        ASA(angleB, sideA, angleC, data);\n        break;\n      case 'ACa':\n        AAS(angleA, angleC, sideA, data);\n        break;\n      case 'BAb':\n        AAS(angleB, angleA, sideB, data);\n        break;\n      case 'BCb':\n        AAS(angleB, angleC, sideB, data);\n        break;\n      case 'CbA':\n        ASA(angleC, sideB, angleA, data);\n        break;\n      case 'AcB':\n        ASA(angleA, sideC, angleB, data);\n        break;\n      case 'CBc':\n        AAS(angleC, angleB, sideC, data);\n        break;\n      case 'CAc':\n        AAS(angleC, angleA, sideC, data);\n        break;\n      default:\n        setMessage(\n          'Please provide more information for a valid triangle to be calculated.'\n        );\n        return;\n    }\n  };\n\n  const setCalculation = (match, comparison, calculation, set, exactMatch) => {\n    let optionA = comparison === 'side' ? sideA : angleA;\n    let optionB = comparison === 'side' ? sideB : angleB;\n    let optionC = comparison === 'side' ? sideC : angleC;\n\n    if (exactMatch === 'a' || match === optionA) {\n      set === 'side' ? setSideA(calculation) : setAngleA(calculation);\n    } else if (exactMatch === 'b' || match === optionB) {\n      set === 'side' ? setSideB(calculation) : setAngleB(calculation);\n    } else if (exactMatch === 'c' || match === optionC) {\n      set === 'side' ? setSideC(calculation) : setAngleC(calculation);\n    }\n  };\n\n  const toRad = Math.PI / 180;\n  const toDeg = 180 / Math.PI;\n\n  const angleLawOfSines = (side1, angle1, side2) => {\n    console.log('angleLawOfSines');\n\n    return (\n      Math.asin((Math.sin(angle1 * toRad) * side1) / side2) * toDeg\n    ).toFixed(2);\n  };\n\n  const angleLowOfCosines = (side1, side2, side3) => {\n    return (\n      Math.acos((side2 ** 2 + side3 ** 2 - side1 ** 2) / (2 * side2 * side3)) *\n      toDeg\n    ).toFixed(2);\n  };\n\n  const AA = (angle1, angle2) => {\n    return (180 - angle1 - angle2).toFixed(2);\n  };\n\n  const sideLawOfCosine = (side1, side2, angle3) => {\n    console.log('sideLawOfCosine');\n\n    return Math.sqrt(\n      side1 ** 2 + side2 ** 2 - 2 * side1 * side2 * Math.cos(angle3 * toRad)\n    ).toFixed(2);\n  };\n\n  const sideLawOfSine = (side1, angle1, angle2) => {\n    console.log('sideLawOfSine');\n\n    return (\n      (Math.sin(angle2 * toRad) * side1) /\n      Math.sin(angle1 * toRad)\n    ).toFixed(2);\n  };\n\n  const SSS = () => {\n    console.log('SSS');\n    setAngleA(angleLowOfCosines(sideA, sideB, sideC));\n    setAngleB(angleLowOfCosines(sideB, sideA, sideC));\n    setAngleC(angleLowOfCosines(sideC, sideA, sideB));\n  };\n\n  const AAA = () => {\n    setMessage(\n      'I am sorry but you cannot solve the length of the sides by only providing the angles. You will need to provide the length of at least 1 side.'\n    );\n  };\n\n  const SAS = (side1, angle, side2) => {\n    console.log('SAS');\n\n    let angle2 =\n      angle === angleA\n        ? 'b'\n        : angle === angleB\n        ? 'c'\n        : angle === angleC\n        ? 'a'\n        : null;\n    let angle3 =\n      angle === angleA\n        ? 'c'\n        : angle === angleB\n        ? 'a'\n        : angle === angleC\n        ? 'b'\n        : null;\n\n    const missingSide = sideLawOfCosine(side1, side2, angle);\n    const missingAngle1 = angleLawOfSines(side1, angle, missingSide);\n    const missingAngle2 = AA(angle, missingAngle1);\n    setCalculation('', 'side', missingSide, 'side');\n    setCalculation(null, 'exact', missingAngle1, 'angle', angle2);\n    setCalculation(null, 'exact', missingAngle2, 'angle', angle3);\n  };\n\n  const SSA = (side1, side2, angle) => {\n    console.log('SSA');\n\n    let angle2 =\n      angle === angleA\n        ? 'b'\n        : angle === angleB\n        ? 'a'\n        : angle === angleC\n        ? 'b'\n        : null;\n    let angle3 =\n      angle === angleA\n        ? 'b'\n        : angle === angleB\n        ? 'c'\n        : angle === angleC\n        ? 'a'\n        : null;\n\n    const missingAngle1 = angleLawOfSines(side2, angle, side1);\n    const missingAngle2 = AA(angle, missingAngle1);\n    const missingSide = sideLawOfSine(side1, angle, missingAngle2);\n    setCalculation(null, 'exact', missingAngle1, 'angle', angle2);\n    setCalculation('', 'side', missingSide, 'side');\n    setCalculation(null, 'exact', missingAngle2, 'angle', angle3);\n  };\n\n  const AAS = (angle1, angle2, side) => {\n    console.log('AAS');\n\n    let side2 =\n      side === sideA ? 'b' : side === sideB ? 'c' : side === sideC ? 'a' : null;\n    let side3 =\n      side === sideA ? 'c' : side === sideB ? 'a' : side === sideC ? 'b' : null;\n\n    const missingAngle = AA(angle1, angle2);\n    const missingSide1 = sideLawOfSine(side, angle1, angle2);\n    const missingSide2 = sideLawOfCosine(missingSide1, side, missingAngle);\n    setCalculation('', 'angle', missingAngle, 'angle');\n    setCalculation(null, 'exact', missingSide1, 'side', side2);\n    setCalculation(null, 'exact', missingSide2, 'side', side3);\n  };\n\n  const ASA = (angle1, side, angle2) => {\n    console.log('ASA');\n\n    let side2 =\n      side === sideA ? 'b' : side === sideB ? 'c' : side === sideC ? 'a' : null;\n    let side3 =\n      side === sideA ? 'c' : side === sideB ? 'a' : side === sideC ? 'b' : null;\n\n    const missingAngle = AA(angle1, angle2);\n    const missingSide1 = sideLawOfSine(side, missingAngle, angle2);\n    const missingSide2 = sideLawOfCosine(missingSide1, side, angle1);\n    setCalculation('', 'angle', missingAngle, 'angle');\n    setCalculation(null, 'exact', missingSide1, 'side', side2);\n    setCalculation(null, 'exact', missingSide2, 'side', side3);\n  };\n\n  const trianglePlots = (arr) => {\n    // let x1 = sideC;\n    // let y1 = 0;\n    // let x2 = 0;\n    // let y2 = 0;\n    // let x3 = sideLawOfSine(sideA, 90, 180 - 90 - angleB);\n    // let y3 = sideLawOfSine(sideA, 90, angleB);\n\n    // a , 90 , 180-90-B\n    // let height = sideLawOfSine(15.52, 90, 59); //x\n    let height = sideLawOfSine(50, 90, 180 - 90 - 133); //x\n    // a , 90 , B\n    // let abc = sideLawOfSine(15.52, 90, 31); //y\n    let abc = sideLawOfSine(50, 90, 133); //y\n\n    console.log('x: ', height);\n    console.log('y: ', abc);\n  };\n\n  const anotherTriangle = () => {\n    // setTriangle2([\n    //   originalInput[0],\n    //   originalInput[1],\n    //   originalInput[2],\n    //   180 - triangle1[3],\n    //   triangle1[4],\n    //   triangle1[5],\n    // ]);\n\n    console.log('t2: ', triangle2);\n  };\n\n  const onChange = () => {\n    let emptyArr = originalInput.filter((empty) => empty === '').length;\n\n    let angleOne = document.getElementById('angleA').value;\n    let angleTwo = document.getElementById('angleB').value;\n    let angleThree = document.getElementById('angleC').value;\n\n    setOriginalInput([\n      document.getElementById('sideA').value,\n      document.getElementById('sideB').value,\n      document.getElementById('sideC').value,\n      angleOne,\n      angleTwo,\n      angleThree,\n    ]);\n\n    angleAnalysis(parseInt(angleOne), 'A');\n    angleAnalysis(parseInt(angleTwo), 'B');\n    angleAnalysis(parseInt(angleThree), 'C');\n\n    if (emptyArr <= 4) {\n      setSideA(document.getElementById('sideA').value);\n      setSideB(document.getElementById('sideB').value);\n      setSideC(document.getElementById('sideC').value);\n      setAngleA(angleOne);\n      setAngleB(angleTwo);\n      setAngleC(angleThree);\n\n      setCalculate(calculate + 1);\n    }\n  };\n\n  return (\n    <div>\n      <InputGroup\n        onChangeSideA={() => onChange()}\n        onChangeSideB={() => onChange()}\n        onChangeSideC={() => onChange()}\n        onChangeAngleA={() => onChange()}\n        messageAngleA={angleAtype}\n        onChangeAngleB={() => onChange()}\n        messageAngleB={angleBtype}\n        onChangeAngleC={() => onChange()}\n        messageAngleC={angleCtype}\n      />\n      <br />\n\n      <Drawing\n        x1={sideC}\n        y1={0}\n        x2={0}\n        y2={0}\n        x3={sideLawOfSine(sideA, 90, 180 - 90 - angleB)}\n        y3={sideLawOfSine(sideA, 90, angleB)}\n      />\n\n      {parseInt(angleA) === 0 ||\n      parseInt(angleB) === 0 ||\n      parseInt(angleC) === 0 ||\n      angleA === '' ||\n      angleB === '' ||\n      angleC === '' ||\n      message === 'These sides do not produce a valid triangle.' ||\n      message ===\n        'I am sorry but you cannot solve the length of the sides by only providing the angles. You will need to provide the length of at least 1 side.' ? (\n        <MessageGroup message={message} />\n      ) : (\n        <MessageGroup\n          message={message}\n          sideA={'SideA: ' + sideA}\n          sideB={'SideB: ' + sideB}\n          sideC={'SideC: ' + sideC}\n          angleA={'AngleA: ' + angleA}\n          angleAtype={angleAtype}\n          angleB={'AngleB: ' + angleB}\n          angleBtype={angleBtype}\n          angleC={'AngleC: ' + angleC}\n          angleCtype={angleCtype}\n        />\n      )}\n      <br />\n      <br />\n      <CalculateButton\n        onClick={() => {\n          // reset();\n          setCalculate(calculate + 1);\n        }}\n      />\n      <br />\n      <br />\n      <div>\n        SSA; ['',8,13,'',31,''] [15.52,8,13,92.2,31,56.8] SAS; ['',5,7,49,'','']\n        [5.3,5,7,49,45.4,85.6] AAS; ['','',7,35,'',62] [4.55,7.87,7,35,83,62]\n        ASA; ['','',9,76,34,''] [9.29,5.36,9,76,34,70]\n      </div>\n    </div>\n  );\n};\n\nexport default Calculations;\n","/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/Instructions.js",[],"/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/InputBox.js",[],"/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/AngleCalculations.js",["55","56","57","58"],"/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/InputGroup.js",[],"/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/CalculateButton.js",[],"/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/MessageGroup.js",[],"/Users/tylercasperson/Desktop/FullStack/Projects/triangle-information/src/layout/Drawing.js",["59"],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":26,"column":21,"nodeType":"66","messageId":"67","endLine":26,"endColumn":33},{"ruleId":"64","severity":1,"message":"68","line":27,"column":10,"nodeType":"66","messageId":"67","endLine":27,"endColumn":19},{"ruleId":"64","severity":1,"message":"69","line":27,"column":21,"nodeType":"66","messageId":"67","endLine":27,"endColumn":33},{"ruleId":"64","severity":1,"message":"70","line":29,"column":9,"nodeType":"66","messageId":"67","endLine":29,"endColumn":18},{"ruleId":"71","severity":1,"message":"72","line":53,"column":6,"nodeType":"73","endLine":53,"endColumn":41,"suggestions":"74"},{"ruleId":"64","severity":1,"message":"75","line":11,"column":10,"nodeType":"66","messageId":"67","endLine":11,"endColumn":18},{"ruleId":"64","severity":1,"message":"76","line":11,"column":20,"nodeType":"66","messageId":"67","endLine":11,"endColumn":31},{"ruleId":"64","severity":1,"message":"77","line":12,"column":10,"nodeType":"66","messageId":"67","endLine":12,"endColumn":17},{"ruleId":"64","severity":1,"message":"78","line":12,"column":19,"nodeType":"66","messageId":"67","endLine":12,"endColumn":29},{"ruleId":"71","severity":1,"message":"79","line":166,"column":6,"nodeType":"73","endLine":166,"endColumn":8,"suggestions":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'setTriangle2' is assigned a value but never used.","Identifier","unusedVar","'triangle3' is assigned a value but never used.","'setTriangle3' is assigned a value but never used.","'logValues' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'missingData', 'originalInput', and 'whichTriangle'. Either include them or remove the dependency array.","ArrayExpression",["83"],"'triangle' is assigned a value but never used.","'setTriangle' is assigned a value but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.x1', 'props.x2', 'props.x3', 'props.y1', 'props.y2', and 'props.y3'. Either include them or remove the dependency array.",["84"],"no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},"Update the dependencies array to be: [calculate, angleA, angleB, angleC, missingData, whichTriangle, originalInput]",{"range":"89","text":"90"},"Update the dependencies array to be: [props.x1, props.x2, props.x3, props.y1, props.y2, props.y3]",{"range":"91","text":"92"},[1403,1438],"[calculate, angleA, angleB, angleC, missingData, whichTriangle, originalInput]",[5284,5286],"[props.x1, props.x2, props.x3, props.y1, props.y2, props.y3]"]